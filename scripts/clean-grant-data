#!/usr/bin/env node
'use strict';
const fs = require('fs');
const es = require('event-stream');
const moment = require('moment');
const _ = require('lodash');
const split = require('split');

const wardLocations = require('./geocoding/ward-locations');

const argv = require('yargs')
    .alias('f', 'file')
    .describe('f', 'The path to a JSON file to clean')
    .alias('o', 'output')
    .describe('b', 'The path to the JSON file to output')
    .help('h')
    .alias('h', 'help').argv;

// Turn date fields into actual Date objects
const parseDates = data => {
    const dateFields = [
        'Award Date',
        'Planned Dates:Start Date',
        'Planned Dates:End Date',
        'Last modified'
    ];
    dateFields.forEach(dateField => {
        if (data[dateField]) {
            // We can't specify a format here because the source data uses different formats
            // eg. older data is 2004-04-16 and some of it uses 8/17/15
            let d = moment(data[dateField].trim());
            data[dateField] = {
                $date: d.toDate()
            };
        }
    });
    return data;
};

// Split organisation strings into proper structures
const separateOrgType = data => {
    const orgTypeKey = 'BIGField_Organisation_Type';
    if (data[orgTypeKey]) {
        const parts = data[orgTypeKey].split(' : ');
        data.organisationType = data[orgTypeKey];
        delete data[orgTypeKey];
        if (parts.length > 1) {
            data.organisationType = parts[0];
            data.organisationSubtype = parts[1];
        }
    }
    return data;
};

// Rename the fields to something more useful and drop unused fields
// http://standard.threesixtygiving.org/en/latest/_static/docson/index.html#../360-giving-schema.json
const rename = data => {

    const plannedDates = { startDate: data['Planned Dates:Start Date'] };

    if (data['Planned Dates:End Date']) {
        plannedDates.endDate = data['Planned Dates:End Date'];
    }

    const newData = {
        id: data['Identifier'],
        title: data['Title'],
        description: data['Description'],
        currency: data['Currency'],
        amountAwarded: parseInt(data['Amount Awarded'], 10),
        awardDate: data['Award Date'],
        plannedDates: [plannedDates],
        recipientOrganization: [
            {
                id: data['Recipient Org:Identifier'],
                name: data['Recipient Org:Name'],
                charityNumber: data['Recipient Org:Charity Number'] || undefined,
                companyNumber: data['Recipient Org:Company Number'] || undefined,
                organisationType: data['organisationType'] // @TODO https://github.com/OpenDataServices/grantnav/issues/490
            }
        ],
        beneficiaryLocation: [
            {
                name: data['Recipient Org:Location:0:Name'],
                geoCode: data['Recipient Org:Location:0:Geographic Code'],
                geoCodeType: 'WD'
            },
            {
                name: data['Recipient Org:Location:1:Name'],
                geoCode: data['Recipient Org:Location:1:Geographic Code'],
                geoCodeType: 'CMLAD'
            },
        ],
        fundingOrganization: [
            {
                id: data['Funding Org:Identifier'],
                name: data['Funding Org:Name'],
            }
        ],
        grantProgramme: [
            {
                code: data['Grant Programme:Code'],
                title: data['Grant Programme:Title']
            }
        ],
        dateModified: data['Last modified']
    };

    // Strip out null / undefined
    return _.pickBy(newData, _.identity);

};

const addLocations = data => {
    // Find the first location (eg. ward)
    const wardCode = data.beneficiaryLocation[0].geoCode || false;
    const match = wardLocations.find(m => m.wardCode === wardCode);

    if (match) {
        // Add the constituency location
        data.beneficiaryLocation.push({
            name: match.constituencyName,
            geoCode: match.constituencyCode,
            geoCodeType: 'WPC'
        });

        // If we have lat/lngs for this ward, add them too
        if (match.location) {
            data.beneficiaryLocation[0].location = {
                type: "Point",
                coordinates: [
                    parseFloat(match.location.long),
                    parseFloat(match.location.lat)
                ]
            }
        }
    }

    return data;
};

const outputFileStream = fs.createWriteStream(argv.o, { flags:'a' });

const getStream = function () {
    const stream = fs.createReadStream(argv.f, {encoding: 'utf8'});
    return stream.pipe(split(JSON.parse, null, { trailing: false }));
};

console.log('Beginning cleaning of grant data...');

getStream().pipe(es.mapSync((data) => {
    let cleaned = [data]
        .map(parseDates)
        .map(separateOrgType)
        .map(rename)
        .map(addLocations);

    outputFileStream.write(JSON.stringify(cleaned[0], null, 4) + '\n');
}).on('error', function (err) {
    console.log('Error parsing JSON', err);
}).on('end', () => {
    console.log('Finished cleaning JSON - file written successfully.');
    outputFileStream.end();
}));
