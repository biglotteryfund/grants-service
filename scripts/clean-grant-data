#!/usr/bin/env node
'use strict';
const fs = require('fs');
const es = require('event-stream');
const { pickBy, identity, get, includes, uniqBy, flow, set } = require('lodash');
const split = require('split');
const moment = require('moment');

const argv = require('yargs')
    .alias('f', 'file')
    .describe('f', 'The path to a JSON file to clean')
    .alias('o', 'output')
    .describe('b', 'The path to the JSON file to output')
    .alias('filename', 'filename')
    .describe('filename', 'The name of the original CSV file')
    .help('h')
    .alias('h', 'help').argv;

const {
    locationsByCode,
    GEOCODE_TYPES,
    getCountryName,
    wardLocations,
    knownProgrammes
} = require('./modules/helpers');

const { programmesToRename, invalidProgrammeCodes, invalidGrantIds } = require('./modules/dataTweaks');

let logSkippedOutput = [];

// Turn date fields into actual Date objects
const parseDates = data => {
    const dateFields = [
        'Award Date',
        'Planned Dates:Start Date',
        'Planned Dates:End Date',
        'Last modified'
    ];
    dateFields.forEach(dateField => {
        if (data[dateField]) {
            let parsedDate;
            const dateStr = data[dateField].trim();

            if (dateStr.indexOf('/') === -1) {
                // Is this an ISO string? (eg. used for AwardDate fields)
                parsedDate = moment(dateStr.replace('±', '+'));
            } else {
                // Fall back to standard CSV format
                parsedDate = moment(dateStr, 'DD/MM/YYYY');
            }

            if (parsedDate.isValid()) {
                data[dateField] = {
                    $date: parsedDate.toDate()
                };
            } else {
                console.log('There was an error parsing the date', {
                    date: data[dateField]
                });
            }
        }
    });
    return data;
};

// Split organisation strings into proper structures
const separateOrgType = data => {
    const orgTypeKey = 'BIGField_Organisation_Type';
    const orgTypeKeyNew = 'BIGField:Organisation Type';

    // Older records (pre-2019) used a single field for this (`BIGField_Organisation_Type`)
    // but newer ones split it like so: `BIGField:Organisation Type:Charity`
    // so we try to normalise them here
    if (!data[orgTypeKey]) {
        // Records seem to have multiple types, eg:
        // 'BIGField:Organisation Type:Charity': 'Registered Charity',
        // 'BIGField:Organisation Type:Company': 'Company - Limited by Guarantee',
        // For now we'll take the first one as GrantNav support for these types is limited
        [
            'Charity',
            'Company',
            'Other Type',
            'Public Sector',
            'School'
        ].some(type => {
            const typeKey = `${orgTypeKeyNew}:${type}`;

            // The types names here are new and don't match the legacy ones
            // so we rename them where possible to avoid ending up with
            // both "Company" and "Company/Mutual Society" fields
            let legacyTypeName = type;
            switch (type) {
                case 'Company':
                    legacyTypeName = 'Company/Mutual Society';
                    break;
                case 'Other Type':
                    legacyTypeName = 'Other';
                    break;
            }

            if (data[typeKey]) {
                // Reformat into the same structure as the legacy data
                // eg. `Charity : Registered Charity`
                data[orgTypeKey] = legacyTypeName + ' : ' + data[typeKey];
            }
        });
    }

    if (data[orgTypeKey]) {
        data.organisationType = data[orgTypeKey];
        delete data[orgTypeKey];

        const parts = data.organisationType.split(' : ');

        if (parts.length > 1) {
            data.organisationType = parts[0];
            data.organisationSubtype = parts[1];
        }
    }
    return data;
};

// Rename the fields to something more useful and drop unused fields
// http://standard.threesixtygiving.org/en/latest/_static/docson/index.html#../360-giving-schema.json
const renameFields = data => {

    const plannedDates = { startDate: data['Planned Dates:Start Date'] };

    if (data['Planned Dates:End Date']) {
        plannedDates.endDate = data['Planned Dates:End Date'];
    }

    const newData = {
        id: data['Identifier'],
        title: data['Title'],
        description: data['Description'],
        currency: data['Currency'],
        amountAwarded: parseFloat(data['Amount Awarded']),
        awardDate: data['Award Date'],
        plannedDates: [plannedDates],
        recipientOrganization: {
            id: data['Recipient Org:Identifier'],
            name: data['Recipient Org:Name'],
            charityNumber: data['Recipient Org:Charity Number'] || undefined,
            companyNumber: data['Recipient Org:Company Number'] || undefined,
            // @TODO https://github.com/OpenDataServices/grantnav/issues/490
            organisationType: data['organisationType'],
            organisationSubtype: data['organisationSubtype']
        },
        fundingOrganization: {
            id: data['Funding Org:Identifier'],
            name: data['Funding Org:Name']
        },
        grantProgramme: {
            code: data['Grant Programme:Code'],
            title: data['Grant Programme:Title']
        },
        dateModified: data['Last modified']
    };


    // Handle locations
    // Older data (pre-2019) just has names/codes (which seem to be WD followed by CMLAD)
    // but newer data has additional fields (eg. WPC) which is also labelled
    // so we try to construct an array of location objects and fill in the blanks
    let locations = [];

    // There are up to three location fields in CSVs
    [0, 1, 2].forEach(num => {
        const locationName = data[`Recipient Org:Location:${num}:Name`];
        const locationCode = data[`Recipient Org:Location:${num}:Geographic Code`];

        if (locationName) {
            let locationData = {
                name: locationName,
                geoCode: locationCode
            };

            // Add the code type (if we can find it), eg. CMLAD, WD, WPC etc
            // (newer source data has these codes but uses a wide range of them)
            const codeType = locationsByCode.find(l => l.code === locationCode);
            if (codeType) {
                locationData['geoCodeType'] = codeType.type;
            } else if (num === 0) {
                // the first codes are normally wards
                locationData['geoCodeType'] = GEOCODE_TYPES.ward;
            }

            // Add the country name (if valid) for later filtering
            const countryName = getCountryName(locationCode);
            if (countryName) {
                locationData.country = countryName;
            }

            locations.push(locationData);
        }
    });

    // Add this to the data (if valid)
    if (locations.length > 0) {
        // Is this list of locations missing a constituency? (eg. older records)
        if (!locations.some(l => l.geoCodeType === GEOCODE_TYPES.constituency)) {
            const match = wardLocations.find(m => m.wardCode === locations[0].geoCode);
            if (match) {
                locations.push({
                    name: match.constituencyName,
                    geoCode: match.constituencyCode,
                    geoCodeType: GEOCODE_TYPES.constituency
                });
            }
        }
        newData.beneficiaryLocation = locations;
    }

    // Strip out null / undefined
    return pickBy(newData, identity);

};

// Replace an egregious spelling error on 22k+ records
const fixHeroesReturnTypo = data => {
    const wrong = 'This is a programme for individual veterans as opposed to organisaitons';
    const right = 'This is a programme for individual veterans as opposed to organisations';
    if (data.recipientOrganization.name.indexOf(wrong) !== -1) {
        data.recipientOrganization.name = data.recipientOrganization.name.replace(wrong, right);
    }
    return data;
};

// Replace some wrongly-encoded characters (mostly quotes) with the correct symbols
const fixEncodingIssues = data => {
    // eg [pattern, replacement]
    const encodingFixes = [
        [/â€™/g, '\''],
        [/â€˜/g, '\''],
        [/â€™/g, '\''],
        [/â€“/g, '–'],
        [/â€¦/g, '…'],
        [/â€œ/g, '"'],
        [/Â£/g, '£'],
        [/â€/g, '"'] // must come last, otherwise too general
    ];
    encodingFixes.forEach(pair => {
        let [wrong, right] = pair;
        if (data.title) {
            const hasBrokenTitle = data.title.match(wrong);
            if (hasBrokenTitle) {
                data.title = data.title.replace(wrong, right);
            }
        }
        if (data.description) {
            const hasBrokenDescription = data.description.match(wrong);
            if (hasBrokenDescription) {
                data.description = data.description.replace(wrong, right);
            }
        }
    });

    return data;
};

// Rename funding programmes from their FMS/internal name
// to a public-facing one, or fix a typo / case inconsistency
const renameProgrammes = data => {
    const shouldRename = programmesToRename.find(p => p.from === data.grantProgramme.title);
    if (shouldRename) {
        data.grantProgramme.titleInternal = data.grantProgramme.title;
        data.grantProgramme.title = shouldRename.to;
    }
    return data;
};

// Check to see if we need to add a new programme mapping
const unknownProgrammes = [];
const checkForNewProgrammes = data => {
    if (data.grantProgramme && knownProgrammes.indexOf(data.grantProgramme.code) === -1) {
        unknownProgrammes.push({
            code: data.grantProgramme.code,
            title: data.grantProgramme.title
        });
    }
    return data;
};


const outputFileStream = fs.createWriteStream(argv.o, { flags: 'a' });

const getStream = function() {
    const stream = fs.createReadStream(argv.f, { encoding: 'utf8' });
    return stream.pipe(split(JSON.parse, null, { trailing: false }));
};

const checkValidGrant = data => {
    if (!data.id) {
        console.log('Grant is missing ID field', data);
        return true;
    } else if (!data.awardDate) {
        console.log('Grant is missing awardDate', data);
        return true;
    }
    return false;
};

const checkForMissingPressSummary = data => {
    return data.description.trim().toLowerCase().indexOf('no press summary is available in this release') !== -1;
};

console.log('Beginning cleaning of grant data...');

getStream().pipe(es.mapSync((data) => {

    let cleaned = flow(
        parseDates,
        separateOrgType,
        renameFields,
        fixHeroesReturnTypo,
        fixEncodingIssues,
        renameProgrammes,
        checkForNewProgrammes
    )(data);

    // Remove data from internal-only programmes (eg. transfer of funds)
    const isFromInvalidProgramme = includes(invalidProgrammeCodes, get(cleaned, 'grantProgramme.code'));

    // Remove grants which were not successful (eg. match funding)
    const isInvalidGrant = includes(invalidGrantIds, get(cleaned, 'id'));

    // Some CSVs have a bunch of whitespace at the end so this drops them
    const dataIsInvalid = checkValidGrant(cleaned);

    const isEmbargoed = checkForMissingPressSummary(cleaned);

    // Append this cleaned data to a file if it's valid, else skip it
    if (isFromInvalidProgramme || isInvalidGrant || dataIsInvalid || isEmbargoed) {
        logSkippedOutput.push({ isFromInvalidProgramme, isInvalidGrant, dataIsInvalid, isEmbargoed });
    } else {
        outputFileStream.write(JSON.stringify(cleaned) + '\n');
    }

}).on('error', function(err) {
    console.log('Error parsing JSON', err);
}).on('end', () => {
    console.log('=================');
    console.log('Finished cleaning JSON - file written successfully.');
    console.log(argv.filename);

    if (unknownProgrammes.length > 0) {
        console.log('Some unknown programmes were included in this import.');
        console.log('You should add the following items to /data/fundingProgrammes.js');
        let data = {};
        uniqBy(unknownProgrammes, 'code').forEach(programme => {
            data[programme.code] = {
                '_id': programme.title,
                'code': programme.code,
                'urlPath': '/relative/url/goes/here'
            };
        });
        console.log(JSON.stringify(data, null, 4));
    }

    if (logSkippedOutput.length > 0) {
        console.log('Some items were skipped from importing:');
        let skippedTotals = {};
        logSkippedOutput.forEach(r => {
            for (let [key, value] of Object.entries(r)) {
                if (value === true) {
                    set(skippedTotals, key, get(skippedTotals, key, 0) + 1);
                }
            }
        });
        console.log(JSON.stringify(skippedTotals, null, 4));
    }

    console.log('=================');
    outputFileStream.end();
}));
